# 경로: .github/workflows/deploy.yml

name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_PEM_KEY }}

          script: |
            # 1. nvm(Node Version Manager) 환경 설정 불러오기
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            
            # 2. 프로젝트 폴더 경로 설정 및 생성/이동
            PROJECT_DIR="/home/ubuntu/SysInfo_V4"
            if [ ! -d "$PROJECT_DIR" ]; then
              git clone https://github.com/Hisabori/SysInfo_V4.git $PROJECT_DIR
            fi
            cd $PROJECT_DIR
            
            # 3. GitHub 최신 코드로 강제 덮어쓰기
            git fetch --all
            git reset --hard origin/main

            # 4. 프론트엔드 의존성 설치
            echo "--- Installing frontend dependencies ---"
            cd frontend
            npm install
            
            # 5. 백엔드 의존성 설치
            echo "--- Installing backend dependencies ---"
            cd ../backend
            npm install

            # 6. 모든 권한 부여
            echo "--- Setting permissions ---"
            sudo chmod -R 755 $PROJECT_DIR
            
            # 7. 프론트엔드 빌드
            echo "--- Building frontend ---"
            cd ../frontend
            npm run build

            # 8. 백엔드 재시작 (★ 여기가 최종 수정)
            echo "--- Restarting backend ---"
            cd ../backend
            
            npm install 
            # 먼저 기존에 돌던 모든 pm2 프로세스를 지워서 충돌 방지 (오류 나도 무시)
            ./node_modules/.bin/pm2 delete all || true
            # 새로 서버 시작
            ./node_modules/.bin/pm2 start server.js --name "sysinfo-backend"
            # 현재 프로세스 목록을 저장해서 재부팅 시에도 유지
            ./node_modules/.bin/pm2 save

            # 9. Nginx 재시작
            echo "--- Restarting Nginx with delay ---"
            sleep 2
            sudo systemctl restart nginx